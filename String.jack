// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
     field int length, maxLength; // the current length of the string
     field Array chars; // the array that holds the characters of the string
    
     constructor String new(int in_maxLength) {
        if (in_maxLength < 1) {
           let chars = null; // a zero-capacity string should be supported
        } else {
            let chars = Array.new(in_maxLength);
        }
        let length = 0;
        let maxLength = in_maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(chars = null)) {
            do chars.dispose();
        } 
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < maxLength) {
            let chars[length] = c;
            let length = length + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
            let chars[length] = 0;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var int val, i, d;
        let val = 0;
        let i = 0;
        if (chars[0] = 45) { // '-'
            let i = 1;
        }
        while (i < length) {
            let d = chars[i] - 48;
            let val = (val * 10) + d;
            let i = i + 1;
        }
        if (chars[0] = 45) { // '-'
            let val = -val;
        }
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        var int lastDigit, i;
        var boolean isNegative;
        let i = 0;
        let isNegative = val < 0;
        let val = Math.abs(val);
        if (val = 0) {
            let chars[0] = 48; // '0'
            let length = 1;
            return;
        }
        while (val > 0) {
            let lastDigit = val - ((val / 10) * 10);
            // do Output.printInt(lastDigit);
            // do Output.println();
            let val = val / 10;
            let chars[i] = lastDigit + 48;
            let i = i + 1;
        }
        if (isNegative) {
            let chars[i] = 45; // '-'
            let i = i + 1;
        }
        let length = i;
        // do Output.printInt(length);
        // do Output.println();
        let i = 0;
        while (i < (length/2)) {
            // do Output.printInt(234);
            // do Output.println();
            let lastDigit = chars[i];
            let chars[i] = chars[length - i - 1];
            let chars[length - i - 1] = lastDigit;
            let i = i + 1;
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
    function 
}
