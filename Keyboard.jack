// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
        /** Initializes the keyboard. */
        function void init() {
            return;
        } 

        /**
         * Returns the character of the currently pressed key on the keyboard;
         * if no key is currently pressed, returns 0.
         *
         * Recognizes all ASCII characters, as well as the following keys:
         * new line = 128 = String.newline()
         * backspace = 129 = String.backspace()
         * left arrow = 130
         * up arrow = 131
         * right arrow = 132
         * down arrow = 133
         * home = 134
         * End = 135
         * page up = 136
         * page down = 137
         * insert = 138
         * delete = 139
         * ESC = 140
         * F1 - F12 = 141 - 152
         */
        function char keyPressed() {
            /* The keyboard memory map base is 24576 (0x6000). */
            return Memory.peek(24576);
        }

        /**								
         * Waits until a key is pressed on the keyboard and released,
         * then echoes the key to the screen, and returns the character 
         * of the pressed key.
         */
        function char readChar() {
            var char c,v;
            // Wait until a key is pressed
            while (keyPressed() = 0) { let c = keyPressed();}
            let c = keyPressed();
            // Wait for release (debounce)
            while (~(keyPressed() = 0)) { let v = keyPressed();}
            // Echo the character
            do Output.printChar(c);
            do Output.printChar(32); // print space to separate chars
            return c;
        }

        /**								
         * Displays the message on the screen, reads from the keyboard the entered
         * text until a newline character is detected, echoes the text to the screen,
         * and returns its value. Also handles user backspaces if the current value
         * is longer than a single character.
         */
        function String readLine(String message) {
            var String str;
            var char c;
            var int maxLen, len;            
            let maxLen = 64; // screen width constraint
            do Output.printString(message);
            let str = String.new(maxLen);
            let len = 0;
            while (true) {
                let c = readChar();  // already echoed
                if (c = String.newLine()) {
                    // newline already printed by readChar
                    return str;
                } else if (c = String.backSpace()) {
                    if (len > 0) {
                        do Output.backSpace();
                        do str.eraseLastChar();
                        let len = len - 1;
                    }
                } else {
                    if (len < maxLen) {
                        do str.appendChar(c);
                        let len = len + 1;
                    } else {
                        // At width limit: remove echoed char visually
                        do Output.backSpace();
                    }
                }
            }
        }     

        /**								
         * Displays the message on the screen, reads from the keyboard the entered
         * text until a newline character is detected, echoes the text to the screen,
         * and returns its integer value (until the first non-digit character in the
         * entered text is detected). Also handles user backspaces. 
         */
        function int readInt(String message) {
            var String line;
            var int i, n, sign, c, L;
            let line = readLine(message);
            let L = line.length();
            let i = 0;
            let n = 0;
            let sign = 1;
            if (L > 0) {
                let c = line.charAt(0);
                if (c = 45) { // '-'
                    let sign = -1;
                    let i = 1;
                }
            }
            while (i < L) {
                let c = line.charAt(i);
                if ((c < 48) | (c > 57)) { // not '0'..'9'
                    let i = L; // stop parsing
                } else {
                    let n = Math.multiply(n, 10) + c - 48;
                    let i = i + 1;
                }
            }
            do line.dispose();
            return n * sign;
        }
}
